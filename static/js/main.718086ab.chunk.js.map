{"version":3,"sources":["App.js","actions/index.js","reportWebVitals.js","reducers/counter.js","reducers/isLogged.js","reducers/index.js","index.js"],"names":["App","counter","useSelector","state","dispatch","isLogged","useDispatch","className","onClick","type","payload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","counterReducer","action","isLoggedReducer","allReducers","combineReducers","loggedReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"4MAsBeA,MAlBf,WACE,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WAErCG,GADUF,aAAY,SAAAC,GAAK,OAAIA,EAAME,YAC1BC,eACjB,OACE,sBAAKC,UAAU,MAAf,UACI,0CAAaN,KACb,wBAAQO,QAAW,kBAAMJ,ECVtB,CACHK,KAAM,eDSN,mBACA,wBAAQD,QAAW,kBAAMJ,ECLtB,CACHK,KAAM,cDIN,oBACA,wBAAQD,QAAW,kBAAMJ,ECAtB,CACHK,KAAM,WDDN,mBACA,wBAAQD,QAAW,kBAAMJ,ECKtB,CACHK,KAAM,OACNC,QDPuC,KAAvC,uBEFOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCcCQ,EArBQ,WAAuB,IAAtBjB,EAAqB,uDAAb,EAAEkB,EAAW,uCACzC,OAAOA,EAAOZ,MAEV,IAAK,YACD,OAAON,EAAO,EAElB,IAAK,WACD,OAAOA,EAAQ,EAEnB,IAAK,QACD,OAAe,EAEnB,IAAK,OACD,OAAOA,EAAQkB,EAAOX,QAE1B,QACK,OAAOP,ICNLmB,EAVS,WAA2B,IAA1BnB,EAAyB,wDAAXkB,EAAW,uCAC9C,OAAOA,EAAOZ,MAEV,IAAK,UACD,OAAQN,EAEZ,QACI,OAAOA,ICCJoB,EAJKC,YAAgB,CAChCvB,QAASmB,EACTf,SAAUoB,ICGRC,EAAQC,YAAYJ,EACxBK,OAAOC,8BAAgCD,OAAOC,gCAEhDC,IAASC,OAAQ,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SAAwB,cAAC,EAAD,MAAoBM,SAASC,eAAe,SAMrFtB,M","file":"static/js/main.718086ab.chunk.js","sourcesContent":["import React from 'react'\nimport {useSelector, useDispatch} from 'react-redux' //usedispatch let's us use actions\nimport {increment,decrment,clear,five} from './actions'\n\nfunction App() {\n  const counter = useSelector(state => state.counter)\n  const logged  = useSelector(state => state.isLogged)\n  const dispatch = useDispatch();\n  return (\n    <div className=\"App\">\n        <h1>counter {counter}</h1>\n        <button onClick= { () => dispatch(increment())}>+Plus</button>\n        <button onClick= { () => dispatch(decrment())}>-Minus</button>\n        <button onClick= { () => dispatch(clear())}>CLEAR</button>\n        <button onClick= { () => dispatch(five(5))}>Add 5</button>\n\n        {/* {logged ? <h3>true or false</h3> : \"nothisng to see here\"} */}\n        \n    </div>\n  );\n}\n\nexport default App;\n","export const increment = () => {\r\n    return {\r\n        type: 'INCREMENT'\r\n    };\r\n}; \r\n\r\nexport const decrment = () => {\r\n    return {\r\n        type: 'DECRMENT'\r\n    };\r\n}; \r\n\r\nexport const clear = () => {\r\n    return {\r\n        type: 'CLEAR'\r\n    };\r\n}; \r\n\r\nexport const five = (num) => {\r\n    return {\r\n        type: 'FIVE',\r\n        payload: num\r\n    };\r\n}; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const counterReducer = (state = 0,action) => {\r\n    switch(action.type)\r\n    {\r\n        case 'INCREMENT':\r\n            return state +1;\r\n        \r\n        case 'DECRMENT':\r\n            return state - 1;\r\n        \r\n        case 'CLEAR':\r\n            return state = 0;\r\n\r\n        case 'FIVE':\r\n            return state + action.payload;\r\n        \r\n        default:\r\n             return state;\r\n\r\n    }\r\n}\r\n\r\nexport default counterReducer;","const isLoggedReducer = (state = false,action) => {\r\n    switch(action.type)\r\n    {\r\n        case 'SIGN_IN':\r\n            return !state;\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default isLoggedReducer;","import counterReducer from './counter';\r\nimport loggedReducer from './isLogged';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    counter: counterReducer,\r\n    isLogged: loggedReducer\r\n})\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {createStore} from 'redux';\nimport allReducers from './reducers';\nimport { Provider} from 'react-redux';\n\nconst store = createStore(allReducers, \n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render( <Provider store={store}><App /></Provider>, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}